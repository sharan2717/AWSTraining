var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as AWS from 'aws-sdk';
import { GetObjectCommand, S3Client } from "@aws-sdk/client-s3";
export const handler = (event) => __awaiter(void 0, void 0, void 0, function* () {
    const client = new S3Client({});
    const bucketName = event.Records[0].s3.bucket.name;
    const s3ObjectKey = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));
    let csvContent = "";
    const command = new GetObjectCommand({
        Bucket: "test-bucket",
        Key: "hello-s3.txt",
    });
    try {
        const response = yield client.send(command);
        // The Body object also has 'transformToByteArray' and 'transformToWebStream' methods.
        if (response.Body) {
            const csvContent = yield response.Body.transformToString();
        }
    }
    catch (err) {
        console.error(err);
    }
    calculateresults(csvContent);
    return {
        StatusCode: "200",
        Body: { "Message": "Results Calculated" }
    };
});
const calculateGrade = (mark) => {
    if (mark >= 90)
        return 'A+';
    else if (mark >= 80)
        return 'A';
    else if (mark >= 70)
        return 'B+';
    else if (mark >= 60)
        return 'B';
    else if (mark >= 40)
        return 'C';
    else
        return 'D';
};
function calculateGPA(marks) {
    const creditPoints = {
        Tamil: 1,
        English: 2,
        Maths: 3,
        Science: 2,
        Social: 2
    };
    const gradeValues = { 'A+': 10, 'A': 9, 'B+': 8, 'B': 7, 'C': 6, 'D': 5 };
    let totalCreditPoints = 0;
    let totalGradePoints = 0;
    for (const subject in marks) {
        const grade = calculateGrade(marks[subject]);
        const creditPoint = creditPoints[subject];
        const gradeValue = gradeValues[grade];
        totalCreditPoints += creditPoint;
        totalGradePoints += gradeValue * creditPoint;
    }
    return totalGradePoints / totalCreditPoints;
}
function calculateresults(csvContent) {
    return __awaiter(this, void 0, void 0, function* () {
        const rows = csvContent.split('\n').slice(1);
        const data = rows.map(row => {
            const [Name, Tamil, English, Maths, Science, Social] = row.split(',').map(item => item.trim());
            const GPA = calculateGPA({ Tamil: +Tamil, English: +English, Maths: +Maths, Science: +Science, Social: +Social });
            return {
                Name,
                Tamil: calculateGrade(+Tamil),
                English: calculateGrade(+English),
                Maths: calculateGrade(+Maths),
                Science: calculateGrade(+Science),
                Social: calculateGrade(+Social),
                GPA: GPA.toFixed(2)
            };
        });
        yield AWSaddDocument(data);
        return data;
    });
}
function AWSaddDocument(data) {
    return __awaiter(this, void 0, void 0, function* () {
        const ddb = new AWS.DynamoDB.DocumentClient();
        const params = {
            TableName: "Results",
            Item: data,
        };
        try {
            yield ddb.put(params).promise();
            return params.Item;
        }
        catch (error) {
            console.error('Error adding document:', error);
            throw error;
        }
    });
}
//# sourceMappingURL=data:application/json;base64,